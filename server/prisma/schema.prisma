generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  PREMIUM
}

enum UserType {
  INDIVIDUAL
  AGENT
  DEVELOPER
}

enum Region {
  DOLNOSLASKIE
  KUJAWSKOPOMORSKIE
  LUBELSKIE
  LUBUSKIE
  LODZKIE
  MALOPOLSKIE
  MAZOWIECKIE
  OPOLSKIE
  PODKARPACKIE
  PODLASKIE
  POMORSKIE
  SLASKIE
  SWIETOKRZYSKIE
  WARMINSKOMAZURSKIE
  WIELKOPOLSKIE
  ZACHODNIOPOMORSKIE
}

enum OfferType {
  DOM
  MIESZKANIE
  DZIALKA
  GARAZ
  POKOJ
  LOKAL
  MAGAZYN
}

enum EstateType {
  PRIMARYMARKET
  AFTERMARKET
}

enum SellType {
  RENT
  BUY
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
}

model Payment {
  id                   String                 @id @unique @default(uuid())
  stripeId             String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  resolvedAt           DateTime?
  resolved             Boolean                @default(false)
  status               PaymentStatus?
  continueUrl          String                 @db.Text
  AccountPacketPayment AccountPacketPayment[]
  BoostOfferPayment    BoostOfferPayment[]
}

model BoostPacket {
  id                String              @id @unique @default(uuid())
  name              String
  price             Float
  days              Int
  properties        Json // { "boostType": ["MAIN" |& "GLOBAL"] }
  BoostOfferPayment BoostOfferPayment[]
}

model BoostOfferPayment {
  id            String      @id @unique @default(uuid())
  boostPacket   BoostPacket @relation(fields: [boostPacketId], references: [id])
  boostPacketId String
  payment       Payment     @relation(fields: [paymentId], references: [id])
  paymentId     String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model UserBoosts {
  id          String        @id @unique @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  properties  Json // { "used": Boolean, "type": "MAIN | GLOBAL" }
  OfferBoosts OfferBoosts[]
}

model AccountPackets {
  id                   String                 @id @unique @default(uuid())
  name                 String
  subname              String                 @default("")
  price                Int
  properties           Json // { "boosts"?: [{days: Number}], "descriptionFields": String[], "expirationDays": Number, "allowedFor": UserType[], "boostDiscount"?: Number, "listings": Number, bids: Number }] }
  AccountPacketPayment AccountPacketPayment[]
}

model AccountPacketPayment {
  id        String         @id @unique @default(uuid())
  packet    AccountPackets @relation(fields: [packetId], references: [id])
  packetId  String
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  payment   Payment        @relation(fields: [paymentId], references: [id])
  paymentId String
}

model UserAccountPacketsSnapshots {
  id         String   @id @unique @default(uuid())
  packetId   String
  name       String
  boughtAt   DateTime @default(now())
  properties Json
  price      Int
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model User {
  id                          String                        @id @unique @default(uuid())
  firstName                   String
  lastName                    String
  email                       String                        @unique
  password                    String
  listings                    Int                           @default(0)
  bids                        Int                           @default(0)
  banned                      Boolean                       @default(false)
  activated                   Boolean                       @default(false)
  role                        Role                          @default(USER)
  type                        UserType
  refreshTokens               RefreshToken[]
  verification                Verification[]
  offers                      Offers[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  telephone String
  AccountPacketPayment        AccountPacketPayment[]
  UserAccountPacketsSnapshots UserAccountPacketsSnapshots[]
  UserBoosts                  UserBoosts[]
  Ban                         Ban?
  SocialMedia                 SocialMedia[]

  Chat              Chat[]
  Messages          Message[]
  Company           Company?
  BoostOfferPayment BoostOfferPayment[]
}

model Company {
  id       String    @id @unique @default(uuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  name     String
  license  String
  address  String
  house    String
  zipCode  String
  nip      String
  regon    String
  SalesRep SalesRep?
}

model SalesRep {
  id           String  @id @unique @default(uuid())
  company      Company @relation(fields: [companyId], references: [id])
  companyId    String  @unique
  firstName    String
  lastName     String
  telephone    String
  altTelephone String
}

model Ban {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  cause     String
  createdAt DateTime @default(now())
}

// Auth
model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Verification {
  id      String   @id @unique @default(uuid())
  email   String
  User    User     @relation(fields: [email], references: [email], onDelete: Cascade)
  code    String   @db.LongText
  expires DateTime
}

// Add Phone Number

model Offers {
  id            String         @id @unique @default(uuid())
  author        String
  authorName    String
  User          User           @relation(fields: [author], references: [id], onDelete: Cascade)
  title         String
  description   String         @db.VarChar(10000)
  price         Int?
  pricePerMonth Int?
  region        Region?
  type          OfferType
  sellType      SellType
  lat           Float
  lng           Float
  isBoosted     Boolean        @default(false)
  boostType     String?
  properties    Json
  expires       DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdOnIp   String
  OfferFeature  OfferFeature[]
  OfferViews    OfferViews[]
}

model Feature {
  id           String         @id @unique @default(uuid())
  name         String         @unique
  OfferFeature OfferFeature[]
}

model OfferFeature {
  id        String  @id @unique @default(uuid())
  Offer     Offers  @relation(fields: [offerId], references: [id])
  offerId   String
  Feature   Feature @relation(fields: [featureId], references: [id])
  featureId String
}

model OfferBoosts {
  id          String     @id @unique @default(uuid())
  offerId     String
  expires     DateTime
  userBoost   UserBoosts @relation(fields: [userBoostId], references: [id], onDelete: Cascade)
  userBoostId String
  properties  Json // { }
}

model OfferViews {
  id      String   @id @unique @default(uuid())
  at      DateTime @default(now())
  by      String
  offer   Offers   @relation(fields: [offerId], references: [id])
  offerId String
}

enum SocialMediaType {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  PINTEREST
  TWITTER
}

model SocialMedia {
  id     String          @id @unique @default(uuid())
  link   String
  type   SocialMediaType
  user   User            @relation(fields: [userId], references: [id])
  userId String
}

model Chat {
  id      String    @id @unique @default(uuid())
  users   User[]
  Message Message[]
}

model Message {
  id       String   @id @unique @default(uuid())
  chat     Chat     @relation(fields: [chatId], references: [id])
  message  String
  sentAt   DateTime @default(now())
  meta     Json // { "readedBy": [uuidv4 of members] }
  chatId   String
  sender   User     @relation(fields: [senderId], references: [id])
  senderId String
}
